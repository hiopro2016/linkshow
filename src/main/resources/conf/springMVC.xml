<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.2.xsd   
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd   
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd   
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee-3.2.xsd    
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
	http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring   
  	http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.2.xsd
  	http://www.springframework.org/schema/task 
	http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- 自动加载属性库 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		lazy-init="false">
		<property name="locations">
			<list>
				<value>classpath:conf/param.properties</value>
				<value>classpath:conf/jdbc.properties</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="true" />
	</bean>

	<!-- 开启切面 -->
	<!-- <aop:aspectj-autoproxy /> -->
	<context:component-scan base-package="com.ddzhuan" />

	<ehcache:annotation-driven cache-manager="ehCacheManager" />

	<bean id="ehCacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
	</bean>
	<!-- fastjson转换器 -->
	<bean id="fastJsonHttpMessageConverter"
		class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter" />

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.ResourceHttpMessageConverter" />
				<ref bean="fastJsonHttpMessageConverter" />
			</list>
		</property>

	</bean>

	<bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="useDefaultSuffixPattern" value="false" />
	</bean>

	<bean id="velocityConfig"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/views/" />
		<property name="velocityProperties">
			<props>
				<prop key="directive.foreach.counter.name">loopCounter</prop>
				<prop key="directive.foreach.counter.initial.value">0</prop>
				<prop key="input.encoding">UTF-8</prop>
				<prop key="output.encoding">UTF-8</prop>
				<prop key="directive.foreach.counter.name">velocityCount</prop>
				<prop key="directive.foreach.counter.initial.value">1</prop>
				<prop key="velocimacro.library.autoreload">true</prop>
			</props>
		</property>
	</bean>
	<bean id="velocityViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
	</bean>
	<!--处理多多媒体上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 指定所上传文件的总大小不能超过80mb。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="81920000" />
	</bean>

	<!-- SpringMVC在超出上传文件限制时,会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的,而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时,自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
			</props>
		</property>
	</bean>

	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg type="java.util.Properties">
					<props>
						<prop key="kaptcha.border">no</prop>
						<prop key="kaptcha.border.color">black</prop>
						<prop key="kaptcha.textproducer.font.color">blue</prop>
						<prop key="kaptcha.textproducer.font.size">27</prop>
						<prop key="kaptcha.image.width">80</prop>
						<prop key="kaptcha.image.height">30</prop>
						<prop key="kaptcha.session.key">loginCheckCode</prop>
						<prop key="kaptcha.textproducer.char.string">0123456789</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.textproducer.char.space">4</prop>
						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
						<!-- <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.DefaultNoise</prop>
						<prop key="kaptcha.noise.color">245,209,255</prop>-->
						<prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.WaterRipple</prop>
						<prop key="kaptcha.textproducer.font.names">Arial,Courier</prop>
						<prop key="kaptcha.background.clear.from">164,37,225</prop> 
       					<prop key="kaptcha.background.clear.to">white</prop> 
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<!-- 设定资源目录 -->
	<mvc:resources location="/WEB-INF/views/common/" mapping="/common/**" />

	<!-- 配置日志拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*/**" />
			<mvc:exclude-mapping path="/common/**" />
			<bean class="com.ddzhuan.manage.interceptor.MainInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 数据库配置 -->
	<import resource="spring-mybatis.xml" />
	<!-- 配置定时器 -->
	<!-- delay是定时器在应用部署后多长时间（毫秒）开启 period是每隔多长时间（毫秒）执行一次 -->
	<!-- <bean id="timerFactory" class="org.springframework.scheduling.timer.TimerFactoryBean"> 
		<property name="scheduledTimerTasks"> <list> <ref bean="scheduledTask"></ref> 
		</list> </property> </bean> <bean id="scheduledTask" class="org.springframework.scheduling.timer.ScheduledTimerTask"> 
		<property value="5000" name="delay"></property> <property value="10000" name="period"></property> 
		<property name="timerTask" ref="checkAlarmTask"></property> </bean> <bean 
		id="checkAlarmTask" class="com.ddzhuan.manage.task.BaseTask"> </bean> -->
		
		<task:annotation-driven />
</beans>
